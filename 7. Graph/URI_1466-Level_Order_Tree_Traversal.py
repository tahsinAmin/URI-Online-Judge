def search(pN, newValue):
    if (newValue < pN):
        if dic[pN][0] == 0:
            dic[pN][0] = newValue
            dic[newValue] = [0, 0]
        else:
            search(dic[pN][0], newValue)
    else:
        if dic[pN][1] == 0:
            dic[pN][1] = newValue
            dic[newValue] = [0, 0]
        else:
            search(dic[pN][1], newValue)

    return dic


cases = int(input())
for x in range(cases):
    amount = int(input())
    arr = list(map(int, input().split()))
    dic = {arr[0]: [0, 0]}
    for i in range(1, amount):
        dic = search(arr[0], arr[i])

    q = [arr[0]]
    print(f"Case {x+1}:")
    result = ""
    while len(q) > 0:
        popNode = q.pop(0)
        result += " " + str(popNode)
        if dic[popNode][0] != 0:
            q.append(dic[popNode][0])
        if dic[popNode][1] != 0:
            q.append(dic[popNode][1])
    print(f"{result[1:]}\n")

    #             1631
    #       /               \
    #      /                 \
    #     /                   \
    #   394                  9842
    #     \                   /
    #      \                 /
    #       \               /
    #     464              5395
    #        \            /    \
    #         \          /      \
    #       1153     1757       8537
    #                 \         /
    #                  1967   6811
    #                          /
    #                       5670


# 1
# 400
# 1631 9842 5395 8537 394 6811 464 5670 1153 1757 1967 3178 2054 1431 2307 8598 2168 6125 642 6555 2632 2090 6678 170 8204 5834 8944 9485 5479 8711 3408 3339 280 930 4034 4760 6194 8580 4555 1243 3820 198 7957 2293 1802 942 1256 8350 6268 6442 4393 9042 3590 7602 7431 2092 3888 9657 3795 4050 1086 8484 368 9441 338 1119 2172 320 7660 5389 8429 6131 7965 2271 2437 4926 2628 5245 9525 3702 1641 2703 1329 3662 5772 1283 1504 2291 4059 7934 0 1401 758 4868 8250 2901 3617 1143 5335 4845 3258 7373 2196 6908 3477 4402 7243 1074 5323 9212 7376 2954 1151 2296 6447 4113 8955 2269 664 1289 7439 4928 1603 4742 621 1897 4831 4380 696 1055 1397 2323 5287 577 3256 2862 8677 1015 7680 2713 4109 3144 3576 1858 8708 2621 4596 3674 2151 5510 8759 7579 1703 4923 3284 3531 2418 1318 8211 3570 4068 4991 5990 3929 6526 1624 428 3811 7141 2187 1734 2208 318 8672 1673 6080 8361 2515 5843 5125 1035 4838 209 6012 9521 1091 4880 3886 1121 6292 7635 8657 5507 838 6069 6052 5281 139 6223 9660 4139 1455 2108 4312 781 1806 9066 1611 5861 6308 8267 4400 4837 1774 5126 2852 9582 593 9219 3707 4024 611 7534 299 5786 9967 1464 6272 73 303 941 5964 3865 6936 2723 4153 1893 4396 4960 7543 5279 308 6044 6763 5558 6174 2280 5765 9741 9688 2511 1587 7034 6958 6828 5989 8876 8816 1068 1313 7377 3895 8517 6536 6118 4329 3288 7384 7792 5243 803 3443 9243 5863 8617 864 4207 8086 1457 9533 7472 2878 789 714 4229 8046 9733 383 7861 8309 7808 7914 3691 1516 3099 3682 6322 6005 5908 7679 2693 8754 2321 8653 2543 6829 3127 8062 245 5992 9529 3189 9974 7767 1380 3152 5810 7517 7867 5397 1689 4212 2542 7025 6821 161 2464 9596 7291 2887 4121 6257 2398 3595 2969 8109 4325 568 3727 2893 4084 9294 6769 3506 1245 7639 9034 7434 9607 3690 178 6038 1491 7987 1357 3710 8685 5775 9434 966 9047 6552 8614 1142 6459 8243 7410 9885 9863 7963 8437 9044 9543 127 3714 7497 8293 7276 5269 2567 867 4998 3049 3211 9850 1354 6098 2072 8778 7933 4198 2715 8719 5805 1889 7308 7192 5115 1914 3543
